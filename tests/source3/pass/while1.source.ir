; ModuleID = 'module'
source_filename = "module"

%literal = type { double, double }
%string_literal = type { double, i8* }

@format_number = private unnamed_addr constant [5 x i8] c"%lf\0A\00", align 1
@format_true = private unnamed_addr constant [6 x i8] c"true\0A\00", align 1
@format_false = private unnamed_addr constant [7 x i8] c"false\0A\00", align 1
@format_string = private unnamed_addr constant [6 x i8] c"\22%s\22\0A\00", align 1
@format_function = private unnamed_addr constant [17 x i8] c"function object\0A\00", align 1
@format_undef = private unnamed_addr constant [11 x i8] c"undefined\0A\00", align 1
@format_error = private unnamed_addr constant [13 x i8] c"error: \22%s\22\0A\00", align 1
@0 = private unnamed_addr constant [18 x i8] c"boo type mismatch\00", align 1
@1 = private unnamed_addr constant [18 x i8] c"boo type mismatch\00", align 1
@2 = private unnamed_addr constant [18 x i8] c"boo type mismatch\00", align 1

declare i8* @malloc(i32)

declare i64 @printf(i8*, ...)

declare i8* @strcpy(i8*, i8*)

declare i32 @strlen(i8*)

declare i8* @strcat(i8*, i8*)

declare void @exit(i32)

define void @display(%literal* %0) {
entry:
  %1 = getelementptr inbounds %literal, %literal* %0, i32 0, i32 0
  %2 = getelementptr inbounds %literal, %literal* %0, i32 0, i32 1
  %3 = load double, double* %1
  %4 = load double, double* %2
  %5 = fcmp oeq double %3, 2.000000e+00
  br i1 %5, label %display_boolean, label %tmp

tmp:                                              ; preds = %entry
  %6 = fcmp oeq double %3, 3.000000e+00
  br i1 %6, label %display_string, label %tmp1

tmp1:                                             ; preds = %tmp
  %7 = fcmp oeq double %3, 4.000000e+00
  br i1 %7, label %display_function, label %tmp2

tmp2:                                             ; preds = %tmp1
  %8 = fcmp oeq double %3, 5.000000e+00
  br i1 %8, label %display_undefined, label %display_number

display_number:                                   ; preds = %tmp2
  %9 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @format_number, i32 0, i32 0), double %4)
  br label %end

display_boolean:                                  ; preds = %entry
  %10 = fcmp oeq double %4, 1.000000e+00
  br i1 %10, label %print_true, label %print_false

print_true:                                       ; preds = %display_boolean
  %11 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @format_true, i32 0, i32 0))
  br label %end

print_false:                                      ; preds = %display_boolean
  %12 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @format_false, i32 0, i32 0))
  br label %end

display_string:                                   ; preds = %tmp
  %13 = bitcast double %4 to i64
  %14 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @format_string, i32 0, i32 0), i64 %13)
  br label %end

display_function:                                 ; preds = %tmp1
  %15 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @format_function, i32 0, i32 0))
  br label %end

display_undefined:                                ; preds = %tmp2
  %16 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @format_undef, i32 0, i32 0))
  br label %end

end:                                              ; preds = %display_undefined, %display_function, %display_string, %print_false, %print_true, %display_number
  ret void
}

define void @error(i8* %0) {
entry:
  %1 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @format_error, i32 0, i32 0), i8* %0)
  call void @exit(i32 1)
  ret void
}

define i8* @strconcat(i8* %0, i8* %1) {
entry:
  %2 = call i32 @strlen(i8* %0)
  %3 = call i32 @strlen(i8* %1)
  %4 = add i32 %2, %3
  %5 = add i32 %4, 1
  %6 = call i8* @malloc(i32 %5)
  %7 = call i8* @strcpy(i8* %6, i8* %0)
  %8 = call i8* @strcat(i8* %6, i8* %1)
  ret i8* %6
}

define i32 @main() {
entry:
  %env = call i8* @malloc(i32 8)
  %0 = bitcast i8* %env to %literal**
  %env1 = call i8* @malloc(i32 32)
  %1 = bitcast i8* %env1 to %literal**
  %2 = bitcast %literal** %1 to %literal***
  store %literal** %0, %literal*** %2
  %3 = call i8* @malloc(i32 16)
  %4 = bitcast i8* %3 to %literal*
  %5 = getelementptr inbounds %literal, %literal* %4, i32 0, i32 0
  %6 = getelementptr inbounds %literal, %literal* %4, i32 0, i32 1
  store double 1.000000e+00, double* %5
  store double 5.000000e+00, double* %6
  %7 = getelementptr inbounds %literal*, %literal** %1, i32 1
  store %literal* %4, %literal** %7
  %8 = call i8* @malloc(i32 16)
  %9 = bitcast i8* %8 to %literal*
  %10 = getelementptr inbounds %literal, %literal* %9, i32 0, i32 0
  %11 = getelementptr inbounds %literal, %literal* %9, i32 0, i32 1
  store double 1.000000e+00, double* %10
  store double 1.000000e+00, double* %11
  %12 = getelementptr inbounds %literal*, %literal** %1, i32 2
  store %literal* %9, %literal** %12
  %13 = call i8* @malloc(i32 16)
  %14 = bitcast i8* %13 to %literal*
  %15 = getelementptr inbounds %literal, %literal* %14, i32 0, i32 0
  %16 = getelementptr inbounds %literal, %literal* %14, i32 0, i32 1
  store double 1.000000e+00, double* %15
  store double 1.000000e+00, double* %16
  %17 = getelementptr inbounds %literal*, %literal** %1, i32 3
  store %literal* %14, %literal** %17
  br label %while.test

while.test:                                       ; preds = %add.end, %entry
  %18 = getelementptr inbounds %literal*, %literal** %1, i32 2
  %19 = load %literal*, %literal** %18
  %20 = getelementptr inbounds %literal*, %literal** %1, i32 1
  %21 = load %literal*, %literal** %20
  %22 = getelementptr inbounds %literal, %literal* %19, i32 0, i32 1
  %23 = getelementptr inbounds %literal, %literal* %21, i32 0, i32 1
  %24 = load double, double* %22
  %25 = load double, double* %23
  %26 = getelementptr inbounds %literal, %literal* %19, i32 0, i32 0
  %27 = getelementptr inbounds %literal, %literal* %21, i32 0, i32 0
  %28 = load double, double* %26
  %29 = load double, double* %27
  %30 = fcmp oeq double %28, 1.000000e+00
  br i1 %30, label %tc.next, label %tc.error

while.body:                                       ; preds = %tc.valid
  %env2 = call i8* @malloc(i32 8)
  %31 = bitcast i8* %env2 to %literal**
  %32 = bitcast %literal** %31 to %literal***
  store %literal** %1, %literal*** %32
  %33 = bitcast %literal** %31 to %literal***
  %34 = load %literal**, %literal*** %33
  %35 = getelementptr inbounds %literal*, %literal** %34, i32 3
  %36 = load %literal*, %literal** %35
  %37 = bitcast %literal** %31 to %literal***
  %38 = load %literal**, %literal*** %37
  %39 = getelementptr inbounds %literal*, %literal** %38, i32 2
  %40 = load %literal*, %literal** %39
  %41 = getelementptr inbounds %literal, %literal* %36, i32 0, i32 1
  %42 = getelementptr inbounds %literal, %literal* %40, i32 0, i32 1
  %43 = load double, double* %41
  %44 = load double, double* %42
  %45 = getelementptr inbounds %literal, %literal* %36, i32 0, i32 0
  %46 = getelementptr inbounds %literal, %literal* %40, i32 0, i32 0
  %47 = load double, double* %45
  %48 = load double, double* %46
  %49 = fcmp oeq double %47, 1.000000e+00
  br i1 %49, label %tc.next3, label %tc.error4

while.end:                                        ; preds = %tc.valid
  %50 = getelementptr inbounds %literal*, %literal** %1, i32 3
  %51 = load %literal*, %literal** %50
  call void @display(%literal* %51)
  ret i32 0

tc.next:                                          ; preds = %while.test
  %52 = fcmp oeq double %29, 1.000000e+00
  br i1 %52, label %tc.valid, label %tc.error

tc.error:                                         ; preds = %tc.next, %while.test
  call void @error(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @0, i32 0, i32 0))
  call void @exit(i32 1)
  br label %tc.valid

tc.valid:                                         ; preds = %tc.error, %tc.next
  %53 = fcmp olt double %24, %25
  %54 = uitofp i1 %53 to double
  %55 = call i8* @malloc(i32 16)
  %56 = bitcast i8* %55 to %literal*
  %57 = getelementptr inbounds %literal, %literal* %56, i32 0, i32 0
  %58 = getelementptr inbounds %literal, %literal* %56, i32 0, i32 1
  store double 2.000000e+00, double* %57
  store double %54, double* %58
  %59 = getelementptr inbounds %literal, %literal* %56, i32 0, i32 1
  %60 = load double, double* %59
  %61 = fptosi double %60 to i1
  br i1 %61, label %while.body, label %while.end

tc.next3:                                         ; preds = %while.body
  %62 = fcmp oeq double %48, 1.000000e+00
  br i1 %62, label %tc.valid5, label %tc.error4

tc.error4:                                        ; preds = %tc.next3, %while.body
  call void @error(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @1, i32 0, i32 0))
  call void @exit(i32 1)
  br label %tc.valid5

tc.valid5:                                        ; preds = %tc.error4, %tc.next3
  %63 = fmul double %43, %44
  %64 = call i8* @malloc(i32 16)
  %65 = bitcast i8* %64 to %literal*
  %66 = getelementptr inbounds %literal, %literal* %65, i32 0, i32 0
  %67 = getelementptr inbounds %literal, %literal* %65, i32 0, i32 1
  store double 1.000000e+00, double* %66
  store double %63, double* %67
  %68 = bitcast %literal** %31 to %literal***
  %69 = load %literal**, %literal*** %68
  %70 = getelementptr inbounds %literal*, %literal** %69, i32 3
  store %literal* %65, %literal** %70
  %71 = bitcast %literal** %31 to %literal***
  %72 = load %literal**, %literal*** %71
  %73 = getelementptr inbounds %literal*, %literal** %72, i32 2
  %74 = load %literal*, %literal** %73
  %75 = call i8* @malloc(i32 16)
  %76 = bitcast i8* %75 to %literal*
  %77 = getelementptr inbounds %literal, %literal* %76, i32 0, i32 0
  %78 = getelementptr inbounds %literal, %literal* %76, i32 0, i32 1
  store double 1.000000e+00, double* %77
  store double 1.000000e+00, double* %78
  %79 = getelementptr inbounds %literal, %literal* %74, i32 0, i32 1
  %80 = getelementptr inbounds %literal, %literal* %76, i32 0, i32 1
  %81 = load double, double* %79
  %82 = load double, double* %80
  %83 = getelementptr inbounds %literal, %literal* %74, i32 0, i32 0
  %84 = getelementptr inbounds %literal, %literal* %76, i32 0, i32 0
  %85 = load double, double* %83
  %86 = load double, double* %84
  %87 = fcmp oeq double %85, 1.000000e+00
  br i1 %87, label %add.num1, label %add.cstr1

add.num1:                                         ; preds = %tc.valid5
  %88 = fcmp oeq double %86, 1.000000e+00
  br i1 %88, label %add.num, label %add.err

add.cstr1:                                        ; preds = %tc.valid5
  %89 = fcmp oeq double %85, 3.000000e+00
  br i1 %89, label %add.cstr2, label %add.err

add.cstr2:                                        ; preds = %add.cstr1
  %90 = fcmp oeq double %86, 3.000000e+00
  br i1 %90, label %add.str, label %add.err

add.err:                                          ; preds = %add.cstr2, %add.cstr1, %add.num1
  call void @error(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @2, i32 0, i32 0))
  call void @exit(i32 1)
  br label %add.num

add.num:                                          ; preds = %add.err, %add.num1
  %91 = load double, double* %79
  %92 = load double, double* %80
  %93 = fadd double %91, %92
  %94 = call i8* @malloc(i32 16)
  %95 = bitcast i8* %94 to %literal*
  %96 = getelementptr inbounds %literal, %literal* %95, i32 0, i32 0
  %97 = getelementptr inbounds %literal, %literal* %95, i32 0, i32 1
  store double 1.000000e+00, double* %96
  store double %93, double* %97
  br label %add.end

add.str:                                          ; preds = %add.cstr2
  %98 = bitcast %literal* %74 to %string_literal*
  %99 = bitcast %literal* %76 to %string_literal*
  %100 = getelementptr inbounds %string_literal, %string_literal* %98, i32 0, i32 1
  %101 = getelementptr inbounds %string_literal, %string_literal* %99, i32 0, i32 1
  %102 = load i8*, i8** %100
  %103 = load i8*, i8** %101
  %104 = call i8* @strconcat(i8* %102, i8* %103)
  %105 = call i8* @malloc(i32 16)
  %106 = bitcast i8* %105 to %string_literal*
  %107 = getelementptr inbounds %string_literal, %string_literal* %106, i32 0, i32 0
  %108 = getelementptr inbounds %string_literal, %string_literal* %106, i32 0, i32 1
  store double 3.000000e+00, double* %107
  store i8* %104, i8** %108
  %109 = bitcast %string_literal* %106 to %literal*
  br label %add.end

add.end:                                          ; preds = %add.str, %add.num
  %110 = phi %literal* [ %95, %add.num ], [ %109, %add.str ]
  %111 = bitcast %literal** %31 to %literal***
  %112 = load %literal**, %literal*** %111
  %113 = getelementptr inbounds %literal*, %literal** %112, i32 2
  store %literal* %110, %literal** %113
  br label %while.test
}

