; ModuleID = 'module'
source_filename = "module"

%literal = type { double, double }
%string_literal = type { double, i8* }

@format_number = private unnamed_addr constant [5 x i8] c"%lf\0A\00", align 1
@format_true = private unnamed_addr constant [6 x i8] c"true\0A\00", align 1
@format_false = private unnamed_addr constant [7 x i8] c"false\0A\00", align 1
@format_string = private unnamed_addr constant [6 x i8] c"\22%s\22\0A\00", align 1
@format_function = private unnamed_addr constant [17 x i8] c"function object\0A\00", align 1
@format_undef = private unnamed_addr constant [11 x i8] c"undefined\0A\00", align 1
@format_error = private unnamed_addr constant [13 x i8] c"error: \22%s\22\0A\00", align 1
@0 = private unnamed_addr constant [18 x i8] c"boo type mismatch\00", align 1
@1 = private unnamed_addr constant [18 x i8] c"boo type mismatch\00", align 1
@s = private unnamed_addr constant [6 x i8] c"error\00", align 1

declare i8* @malloc(i32)

declare i64 @printf(i8*, ...)

declare i8* @strcpy(i8*, i8*)

declare i32 @strlen(i8*)

declare i8* @strcat(i8*, i8*)

declare void @exit(i32)

define void @display(%literal* %0) {
entry:
  %1 = getelementptr inbounds %literal, %literal* %0, i32 0, i32 0
  %2 = getelementptr inbounds %literal, %literal* %0, i32 0, i32 1
  %3 = load double, double* %1
  %4 = load double, double* %2
  %5 = fcmp oeq double %3, 2.000000e+00
  br i1 %5, label %display_boolean, label %tmp

tmp:                                              ; preds = %entry
  %6 = fcmp oeq double %3, 3.000000e+00
  br i1 %6, label %display_string, label %tmp1

tmp1:                                             ; preds = %tmp
  %7 = fcmp oeq double %3, 4.000000e+00
  br i1 %7, label %display_function, label %tmp2

tmp2:                                             ; preds = %tmp1
  %8 = fcmp oeq double %3, 5.000000e+00
  br i1 %8, label %display_undefined, label %display_number

display_number:                                   ; preds = %tmp2
  %9 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @format_number, i32 0, i32 0), double %4)
  br label %end

display_boolean:                                  ; preds = %entry
  %10 = fcmp oeq double %4, 1.000000e+00
  br i1 %10, label %print_true, label %print_false

print_true:                                       ; preds = %display_boolean
  %11 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @format_true, i32 0, i32 0))
  br label %end

print_false:                                      ; preds = %display_boolean
  %12 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @format_false, i32 0, i32 0))
  br label %end

display_string:                                   ; preds = %tmp
  %13 = bitcast double %4 to i64
  %14 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @format_string, i32 0, i32 0), i64 %13)
  br label %end

display_function:                                 ; preds = %tmp1
  %15 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @format_function, i32 0, i32 0))
  br label %end

display_undefined:                                ; preds = %tmp2
  %16 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @format_undef, i32 0, i32 0))
  br label %end

end:                                              ; preds = %display_undefined, %display_function, %display_string, %print_false, %print_true, %display_number
  ret void
}

define void @error(i8* %0) {
entry:
  %1 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @format_error, i32 0, i32 0), i8* %0)
  call void @exit(i32 1)
  ret void
}

define i8* @strconcat(i8* %0, i8* %1) {
entry:
  %2 = call i32 @strlen(i8* %0)
  %3 = call i32 @strlen(i8* %1)
  %4 = add i32 %2, %3
  %5 = add i32 %4, 1
  %6 = call i8* @malloc(i32 %5)
  %7 = call i8* @strcpy(i8* %6, i8* %0)
  %8 = call i8* @strcat(i8* %6, i8* %1)
  ret i8* %6
}

define i32 @main() {
entry:
  %env = call i8* @malloc(i32 8)
  %0 = bitcast i8* %env to %literal**
  %env1 = call i8* @malloc(i32 16)
  %1 = bitcast i8* %env1 to %literal**
  %2 = bitcast %literal** %1 to %literal***
  store %literal** %0, %literal*** %2
  %3 = call i8* @malloc(i32 16)
  %4 = bitcast i8* %3 to %literal*
  %5 = getelementptr inbounds %literal, %literal* %4, i32 0, i32 0
  %6 = getelementptr inbounds %literal, %literal* %4, i32 0, i32 1
  store double 1.000000e+00, double* %5
  store double 1.000000e+00, double* %6
  %7 = getelementptr inbounds %literal*, %literal** %1, i32 1
  store %literal* %4, %literal** %7
  br label %while.test

while.test:                                       ; preds = %if.end, %add.end, %entry
  %8 = call i8* @malloc(i32 16)
  %9 = bitcast i8* %8 to %literal*
  %10 = getelementptr inbounds %literal, %literal* %9, i32 0, i32 0
  %11 = getelementptr inbounds %literal, %literal* %9, i32 0, i32 1
  store double 2.000000e+00, double* %10
  store double 1.000000e+00, double* %11
  %12 = getelementptr inbounds %literal, %literal* %9, i32 0, i32 1
  %13 = load double, double* %12
  %14 = fptosi double %13 to i1
  br i1 %14, label %while.body, label %while.end

while.body:                                       ; preds = %while.test
  %env2 = call i8* @malloc(i32 8)
  %15 = bitcast i8* %env2 to %literal**
  %16 = bitcast %literal** %15 to %literal***
  store %literal** %1, %literal*** %16
  %17 = bitcast %literal** %15 to %literal***
  %18 = load %literal**, %literal*** %17
  %19 = getelementptr inbounds %literal*, %literal** %18, i32 1
  %20 = load %literal*, %literal** %19
  %21 = call i8* @malloc(i32 16)
  %22 = bitcast i8* %21 to %literal*
  %23 = getelementptr inbounds %literal, %literal* %22, i32 0, i32 0
  %24 = getelementptr inbounds %literal, %literal* %22, i32 0, i32 1
  store double 1.000000e+00, double* %23
  store double 5.000000e+00, double* %24
  %25 = getelementptr inbounds %literal, %literal* %20, i32 0, i32 1
  %26 = getelementptr inbounds %literal, %literal* %22, i32 0, i32 1
  %27 = load double, double* %25
  %28 = load double, double* %26
  %29 = getelementptr inbounds %literal, %literal* %20, i32 0, i32 0
  %30 = getelementptr inbounds %literal, %literal* %22, i32 0, i32 0
  %31 = load double, double* %29
  %32 = load double, double* %30
  %33 = fcmp oeq double %31, 1.000000e+00
  br i1 %33, label %tc.next, label %tc.error

while.end:                                        ; preds = %if.false, %while.test
  %34 = getelementptr inbounds %literal*, %literal** %1, i32 1
  %35 = load %literal*, %literal** %34
  call void @display(%literal* %35)
  ret i32 0

tc.next:                                          ; preds = %while.body
  %36 = fcmp oeq double %32, 1.000000e+00
  br i1 %36, label %tc.valid, label %tc.error

tc.error:                                         ; preds = %tc.next, %while.body
  call void @error(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @0, i32 0, i32 0))
  call void @exit(i32 1)
  br label %tc.valid

tc.valid:                                         ; preds = %tc.error, %tc.next
  %37 = fcmp olt double %27, %28
  %38 = uitofp i1 %37 to double
  %39 = call i8* @malloc(i32 16)
  %40 = bitcast i8* %39 to %literal*
  %41 = getelementptr inbounds %literal, %literal* %40, i32 0, i32 0
  %42 = getelementptr inbounds %literal, %literal* %40, i32 0, i32 1
  store double 2.000000e+00, double* %41
  store double %38, double* %42
  %43 = getelementptr inbounds %literal, %literal* %40, i32 0, i32 1
  %44 = load double, double* %43
  %45 = fptosi double %44 to i1
  br i1 %45, label %if.true, label %if.false

if.true:                                          ; preds = %tc.valid
  %env3 = call i8* @malloc(i32 8)
  %46 = bitcast i8* %env3 to %literal**
  %47 = bitcast %literal** %46 to %literal***
  store %literal** %15, %literal*** %47
  %48 = bitcast %literal** %46 to %literal***
  %49 = load %literal**, %literal*** %48
  %50 = bitcast %literal** %49 to %literal***
  %51 = load %literal**, %literal*** %50
  %52 = getelementptr inbounds %literal*, %literal** %51, i32 1
  %53 = load %literal*, %literal** %52
  %54 = call i8* @malloc(i32 16)
  %55 = bitcast i8* %54 to %literal*
  %56 = getelementptr inbounds %literal, %literal* %55, i32 0, i32 0
  %57 = getelementptr inbounds %literal, %literal* %55, i32 0, i32 1
  store double 1.000000e+00, double* %56
  store double 1.000000e+00, double* %57
  %58 = getelementptr inbounds %literal, %literal* %53, i32 0, i32 1
  %59 = getelementptr inbounds %literal, %literal* %55, i32 0, i32 1
  %60 = load double, double* %58
  %61 = load double, double* %59
  %62 = getelementptr inbounds %literal, %literal* %53, i32 0, i32 0
  %63 = getelementptr inbounds %literal, %literal* %55, i32 0, i32 0
  %64 = load double, double* %62
  %65 = load double, double* %63
  %66 = fcmp oeq double %64, 1.000000e+00
  br i1 %66, label %add.num1, label %add.cstr1

if.false:                                         ; preds = %tc.valid
  %env4 = call i8* @malloc(i32 8)
  %67 = bitcast i8* %env4 to %literal**
  %68 = bitcast %literal** %67 to %literal***
  store %literal** %15, %literal*** %68
  br label %while.end

if.end:                                           ; No predecessors!
  %69 = call i8* @malloc(i32 16)
  %70 = bitcast i8* %69 to %string_literal*
  %71 = getelementptr inbounds %string_literal, %string_literal* %70, i32 0, i32 0
  %72 = getelementptr inbounds %string_literal, %string_literal* %70, i32 0, i32 1
  store double 3.000000e+00, double* %71
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @s, i32 0, i32 0), i8** %72
  %73 = bitcast %string_literal* %70 to %literal*
  call void @display(%literal* %73)
  br label %while.test

add.num1:                                         ; preds = %if.true
  %74 = fcmp oeq double %65, 1.000000e+00
  br i1 %74, label %add.num, label %add.err

add.cstr1:                                        ; preds = %if.true
  %75 = fcmp oeq double %64, 3.000000e+00
  br i1 %75, label %add.cstr2, label %add.err

add.cstr2:                                        ; preds = %add.cstr1
  %76 = fcmp oeq double %65, 3.000000e+00
  br i1 %76, label %add.str, label %add.err

add.err:                                          ; preds = %add.cstr2, %add.cstr1, %add.num1
  call void @error(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @1, i32 0, i32 0))
  call void @exit(i32 1)
  br label %add.num

add.num:                                          ; preds = %add.err, %add.num1
  %77 = load double, double* %58
  %78 = load double, double* %59
  %79 = fadd double %77, %78
  %80 = call i8* @malloc(i32 16)
  %81 = bitcast i8* %80 to %literal*
  %82 = getelementptr inbounds %literal, %literal* %81, i32 0, i32 0
  %83 = getelementptr inbounds %literal, %literal* %81, i32 0, i32 1
  store double 1.000000e+00, double* %82
  store double %79, double* %83
  br label %add.end

add.str:                                          ; preds = %add.cstr2
  %84 = bitcast %literal* %53 to %string_literal*
  %85 = bitcast %literal* %55 to %string_literal*
  %86 = getelementptr inbounds %string_literal, %string_literal* %84, i32 0, i32 1
  %87 = getelementptr inbounds %string_literal, %string_literal* %85, i32 0, i32 1
  %88 = load i8*, i8** %86
  %89 = load i8*, i8** %87
  %90 = call i8* @strconcat(i8* %88, i8* %89)
  %91 = call i8* @malloc(i32 16)
  %92 = bitcast i8* %91 to %string_literal*
  %93 = getelementptr inbounds %string_literal, %string_literal* %92, i32 0, i32 0
  %94 = getelementptr inbounds %string_literal, %string_literal* %92, i32 0, i32 1
  store double 3.000000e+00, double* %93
  store i8* %90, i8** %94
  %95 = bitcast %string_literal* %92 to %literal*
  br label %add.end

add.end:                                          ; preds = %add.str, %add.num
  %96 = phi %literal* [ %81, %add.num ], [ %95, %add.str ]
  %97 = bitcast %literal** %46 to %literal***
  %98 = load %literal**, %literal*** %97
  %99 = bitcast %literal** %98 to %literal***
  %100 = load %literal**, %literal*** %99
  %101 = getelementptr inbounds %literal*, %literal** %100, i32 1
  store %literal* %96, %literal** %101
  br label %while.test
}

